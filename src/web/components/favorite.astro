---
import { Icon } from '@/components/icon';
import Img from '@/components/img.astro';
import Linkable from '@/components/linkable.astro';
import type { AsyncEntry } from '@/types/entries';
import type { ImageProps } from '@/types/image';
import { cn } from '@/utils/cn';
import { fitImage } from '@/utils/fit-image';
import { removeTopElement } from '@/utils/html-string';
import { markdownToHtml } from '@/utils/markdown-to-html';
import Popover from '@/web/components/popover.astro';

interface Props {
  /** An entry from the `favorites` collection. */
  entry: AsyncEntry<'favorites'>;

  /**
   * [Iconify](https://icon-sets.iconify.design/) icon to display for the favorite.
   * Icon is displayed if `image` prop is not provided or when given favorite has no image specified.
   **/
  icon?: string;

  /**
   * Image variant to display for the favorite. Possible values are:
   * - `poster` - vertical image with 3:4 aspect ratio.
   * - `person` - large circular image.
   * - `favicon` - small square image.
   * - `video` - horizontal image with 16:9 aspect ratio.
   **/
  image?: keyof typeof imageSizes;

  /** Loading strategy passed to the <Img /> and <Icon /> components. */
  loading?: ImageProps['loading'];

  /** Whether to display an origin address of the favorite's url. **/
  withSource?: boolean;
}

const { entry, icon, image, loading, withSource } = Astro.props;
const { data: favorite, body, render } = await entry;

const Description = body.trim().length > 0 && (await render()).Content;
const subtitle = favorite.subtitle && removeTopElement(markdownToHtml(favorite.subtitle));
const url = withSource && new URL(favorite.url);
const rootClass = cn(
  'relative flex rounded border border-color-border py-2 pl-2 sm:py-3 sm:pl-3',
  Description ? 'pr-7 sm:pr-8' : 'pr-3 sm:pr-4',
);
const iconSizeClass = cn('my-0.5 mr-2 size-4 shrink-0 sm:size-5');
const imageSizes = {
  poster: {
    class: cn('mr-4 h-24 w-18 rounded-sm object-contain sm:h-32 sm:w-24'),
    getSize: fitImage({ width: 96, height: 128 }),
  },
  person: {
    class: cn('mr-3 size-10 rounded-full object-cover sm:mr-4 sm:size-12'),
    getSize: fitImage({ width: 48, height: 48 }),
  },
  favicon: {
    class: cn(iconSizeClass, 'object-contain'),
    getSize: fitImage({ width: 20, height: 20 }),
  },
  video: {
    class: cn('mr-3 h-[54px] w-24 shrink-0 rounded-sm object-cover sm:mr-4 sm:h-18 sm:w-32'),
    getSize: fitImage({ width: 128, height: 72 }),
  },
};
---

<div class={rootClass}>
  {
    favorite.image && image ? (
      <Img
        class={cn(imageSizes[image].class, 'shrink-0 object-center')}
        src={favorite.image}
        alt={favorite.title}
        {loading}
        {...imageSizes[image].getSize(typeof favorite.image === 'object' ? favorite.image : undefined)}
      />
    ) : icon ? (
      <Icon name={icon} class={cn(iconSizeClass, 'text-color-icon-dark')} {loading} />
    ) : null
  }
  <div class="flex w-full flex-col">
    <Linkable class="text-sm font-medium text-color-text-title sm:text-base" href={favorite.url}>
      {favorite.title}
    </Linkable>
    {
      subtitle && (
        <div
          class="-mt-0.5 pt-1 text-sm text-color-text-primary sm:text-base [&_a:not(:hover)]:no-underline"
          set:html={subtitle}
        />
      )
    }
    {
      url && (
        <Linkable class={cn('ml-auto text-sm text-color-text-secondary', Description && '-mr-4')} href={url.origin}>
          {url.hostname}
        </Linkable>
      )
    }
  </div>
  {
    Description && (
      <>
        <Popover>
          <button
            slot="trigger"
            class="absolute -right-px -top-px flex size-6 items-center justify-center rounded-bl rounded-tr bg-color-bg-main transition-colors hover:bg-color-bg-main/80"
          >
            <Icon name="fa6-solid:info" class="size-3 text-color-icon-main" />
          </button>
          <Description />
        </Popover>
      </>
    )
  }
</div>
